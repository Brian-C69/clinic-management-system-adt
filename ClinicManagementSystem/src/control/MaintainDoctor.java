package control;

/**
 *
 * @author Christian Lau Zi Xian
 */


import adt.LinkedList;
import adt.ListInterface;
import boundary.ClinicUI;
import entity.Doctor;
import entity.Consultation;

public class MaintainDoctor {

    private ListInterface<Doctor> doctorList;
    private LinkedList<int[]> dutyScheduler;
    private LinkedList<Consultation> consultation;
    private int doctorIdCounter = 0;

    public MaintainDoctor() {
        this.doctorList = new LinkedList<>();
    }

    public MaintainDoctor(ListInterface<Doctor> store) {
        this.doctorList = store;
    }

    public String autoGenerateDoctorId() {
        doctorIdCounter++;
        return String.format("D%03d", doctorIdCounter);
    }

    public void addDoctor(Doctor d) {
        d.setDoctorId(autoGenerateDoctorId());
        doctorList.add(d);
    }

    public boolean updateExistingDoctor(int index, Doctor nd) {
        if (index < 0 || index >= doctorList.size() || nd == null) {
            return false;
        }

        Doctor ex = doctorList.get(index);

        if (nd.getName() != null) {
            ex.setName(nd.getName());
        }
        if (nd.getMmcNumber() != null) {
            ex.setMmcNumber(nd.getMmcNumber());
        }
        if (nd.getSpecialization() != null) {
            ex.setSpecialization(nd.getSpecialization());
        }
        if (nd.getEmail() != null) {
            ex.setEmail(nd.getEmail());
        }
        if (nd.getGender() != null) {
            ex.setGender(nd.getGender());
        }

        // Update duty schedule
        if (nd.getDutySchedule() != null && !nd.getDutySchedule().isEmpty()) {
            if (ex.getDutySchedule() == null) {
                ex.setDutySchedule(nd.getDutySchedule());
            } else {
                // Merge new slots into existing schedule
                for (Doctor.DutySlot slot : nd.getDutySchedule()) {
                    ex.getDutySchedule().add(slot);
                }
            }
        }

        // Update consultations if any
        if (nd.getConsultations() != null && !nd.getConsultations().isEmpty()) {
            if (ex.getConsultations() == null) {
                ex.setConsultations(nd.getConsultations());
            } else {
                for (Consultation c : nd.getConsultations()) {
                    ex.getConsultations().add(c);
                }
            }
        }

        if (nd.getStatus() != null) {
            ex.setStatus(nd.getStatus());
        }

        // Always update availability flag
        ex.setIsAvailable(nd.isAvailable());

        return true;
    }

    public Doctor deleteDoctor(int index) {
        if (doctorList.isEmpty() || index >= doctorList.size()) {
            System.out.println("No doctor available. Please add doctor !");
        }
        return doctorList.remove(index);
    }
    
     // filters/search
    public ListInterface<Doctor> filterByGender(String gender) {
        ListInterface<Doctor> r = new LinkedList<>();
        for (int i = 0; i < doctorList.size(); i++) {
            Doctor p = doctorList.get(i);
            if (p.getGender()!= null && p.getGender().equalsIgnoreCase(gender)) {
                r.add(p);
            }
        }
        return r;
    }

    public ListInterface<Doctor> filterByAvailability(boolean active) {
        ListInterface<Doctor> r = new LinkedList<>();
        for (int i = 0; i < doctorList.size(); i++) {
            Doctor p = doctorList.get(i);
            if (p.isAvailable()== active) {
                r.add(p);
            }
        }
        return r;
    }

    public ListInterface<Doctor> linearSearch(int option, String keyword) {
        ListInterface<Doctor> r = new LinkedList<>();
        String key = keyword == null ? "" : keyword.toLowerCase();
        for (int i = 0; i < doctorList.size(); i++) {
            Doctor p = doctorList.get(i);
            switch (option) {
                case 1 -> {
                    if (p.getDoctorId()!= null && p.getDoctorId().equalsIgnoreCase(keyword)) {
                        r.add(p);
                    }
                }
                case 2 -> {
                    if (p.getName() != null && p.getName().toLowerCase().contains(key)) {
                        r.add(p);
                    }
                }
            }
        }
        return r;
    }

    public Doctor getDoctor(int index) {
        return (index >= 0 && index < doctorList.size()) ? doctorList.get(index) : null;
    }

    public ListInterface<Doctor> getAllDoctors() {
        return doctorList;
    }

    public int getSize() {
        return doctorList.size();
    }
    
    public static void main(String[] args) {
        new ClinicUI().run();
    }
}
