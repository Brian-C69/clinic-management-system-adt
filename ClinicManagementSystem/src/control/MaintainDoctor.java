package control;

import adt.LinkedList;
import adt.ListInterface;
import entity.Doctor;
import entity.Consultation;

public class MaintainDoctor {

    private ListInterface<Doctor> doctorList;
    private LinkedList<int[]> dutyScheduler;
    private LinkedList<Consultation> consultation;
    private int doctorIdCounter = 0;

    public MaintainDoctor() {
        this.doctorList = new LinkedList<>();
    }

    public MaintainDoctor(ListInterface<Doctor> store) {
        this.doctorList = store;
    }

    public String autoGenerateDoctorId() {
        doctorIdCounter++;
        return String.format("D%03d", doctorIdCounter);
    }

    public void addDoctor(Doctor d) {
        d.setDoctorId(autoGenerateDoctorId());
        doctorList.add(d);
    }

    public boolean updateExistingDoctor(int index, Doctor nd) {
        if (index < 0 || index >= doctorList.size() || nd == null) {
            return false;
        }

        Doctor ex = doctorList.get(index);

        if (nd.getName() != null) {
            ex.setName(nd.getName());
        }
        if (nd.getMmcNumber() != null) {
            ex.setMmcNumber(nd.getMmcNumber());
        }
        if (nd.getSpecialization() != null) {
            ex.setSpecialization(nd.getSpecialization());
        }
        if (nd.getEmail() != null) {
            ex.setEmail(nd.getEmail());
        }
        if (nd.getGender() != null) {
            ex.setGender(nd.getGender());
        }
        if (nd.getDutySchedule() != null && !nd.getDutySchedule().isEmpty()) {
            // Replace or merge depending on business rule
            ex.setDutySchedule(nd.getDutySchedule());
        }
        if (nd.getConsultations() != null && !nd.getConsultations().isEmpty()) {
            // Replace or merge depending on business rule
            ex.setConsultations(nd.getConsultations());
        }
        if (nd.getStatus() != null) {
            ex.setStatus(nd.getStatus());
        }

        // Always overwrite availability unless you want optional control
        ex.setIsAvailable(nd.isAvailable());

        return true;
    }

    public Doctor deleteDoctor(int index) {
        if (doctorList.isEmpty() || index >= doctorList.size()) {
            System.out.println("No doctor available. Please add doctor !");
        }
        return doctorList.remove(index);
    }

    public Doctor getDoctor(int index) {
        return (index >= 0 && index < doctorList.size()) ? doctorList.get(index) : null;
    }

    public ListInterface<Doctor> getAllDoctors() {
        return doctorList;
    }

    public int getSize() {
        return doctorList.size();
    }
}
